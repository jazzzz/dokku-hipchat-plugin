function show_help {
    cat<<EOF
    hipchat:settings <app> <hc v2token> <hc room id> <hc from>            Sets HipChat token, room id, from for app. /WILL/ overwrite old configuration. Does /NOT/ enable notifications.
    hipchat:info <app>                                                    General HipChat information for app
    hipchat:enable <app>                                                  Enables HipChat for app. Requires settings be defined using hipchat:settings
    hipchat:disable <app>                                                 Disables HipChat for app. Leaves configuration behind.
    hipchat:remove <app>                                                  Disables HipChat notifaction (this removes old config)
    hipchat:test <app>                                                    Sends a test message using previous settings
    hipchat:send_message <app> <message>                                  Sends message exactly as message, with no extra info or formatting.
    hipchat:set_hook <app> <hook> <message>                               Customizes hook message. Set message to "DISABLE" to disable notification for specified hook.
EOF
}


# if no config, this errors out w/ dokku_log_fail
function checkconfig_fail {
	[[ ! -f "$CONFIG" ]] && dokku_log_fail "ERROR: HipChat plugin config cannot be found for $APP. Did you use hipchat:settings?"
	true
}

# if no config, this merely prints log entry, and exits.
# this is an important distinction (especially when called within a hook because a dokku_log_fail will stop all progress of deployment)
function checkconfig_error {
	[[ ! -f "$CONFIG" ]] && dokku_log_info1 "ERROR: HipChat plugin config cannot be found for $APP." && exit
	true
}

function set_hook {
	checkconfig_fail
	source "$CONFIG"
	echo "doot: ${HOOK_NOTIFICATIONS[$HOOK]}"

	[[ ! ${HOOK_NOTIFICATIONS[$HOOK]} ]] && dokku_log_fail "ERROR: $HOOK is /NOT/ a definable hook."
	true

	[[ $MSG == "" ]] && dokku_log_fail "ERROR: Don't set message to something empty. If you want to disable, set to DISABLE"
	true

	HOOK_NOTIFICATIONS[$HOOK]="$MSG"
	write_config
	dokku_log_info1 "HipChat: $HOOK updated to $MSG."
}

function hipchat_message {
	[[ $(hipchat_is_enabled) == "false" ]] && dokku_log_info1 "ERROR: HipChat plugin not enabled." && exit
    source "$CONFIG"
	HC_OUT=$({ echo "$1" | HIPCHAT_TOKEN="$HC_TOKEN" HIPCHAT_HIPCHAT_COLOR=green HIPCHAT_ROOM_ID="$HC_ROOM_ID" HIPCHAT_FROM="$HC_FROM" $PLUGIN_PATH/hipchat/hipchat_room_message ; })
	[[ $HC_OUT == *"error"* ]] && dokku_log_info1 "ERROR: HipChat Message failed: $HC_OUT" && exit
	true
}

function hipchat_is_enabled {
	[[ ! -f "$CONFIG" ]] && echo "false" && return
	source "$CONFIG"
	echo "$HC_ENABLED" && return
}

function enable_hipchat {
	checkconfig_fail
	source "$CONFIG"
	HC_ENABLED="true"
	write_config
}

function disable_hipchat {
	checkconfig_fail
	source "$CONFIG"
	HC_ENABLED="false"
	write_config
}

function write_config {
	CONFIG_CONTENT=$(cat - <<EOF
HC_TOKEN="$HC_TOKEN"
HC_ROOM_ID="$HC_ROOM_ID"
HC_FROM="$HC_FROM"
HC_ENABLED="$HC_ENABLED"
declare -A HOOK_NOTIFICATIONS
HOOK_NOTIFICATIONS[pre-deploy]="${HOOK_NOTIFICATIONS[pre-deploy]}"
HOOK_NOTIFICATIONS[post-deploy]="${HOOK_NOTIFICATIONS[post-deploy]}"
HOOK_NOTIFICATIONS[pre-build]="${HOOK_NOTIFICATIONS[pre-build]}"
HOOK_NOTIFICATIONS[post-build]="${HOOK_NOTIFICATIONS[post-build]}"
EOF
)
	echo "$CONFIG_CONTENT" > "$CONFIG"
    true
}

function handle_hook {
	HOOK="$1"
	[[ "${HOOK_NOTIFICATIONS[$HOOK]}" == "DISABLE" ]] && dokku_log_info1 "HipChat Notification disabled for hook $HOOK" && exit 0
	dokku_log_info1 "HipChat: Notifying HipChat for $HOOK"
	MSG="${HOOK_NOTIFICATIONS[$HOOK]}"
	MSG="${MSG/\%APP\%/$APP}"
	MSG="${MSG/\%DATE\%/$(date)}"
	MSG="${MSG/\%HOSTNAME\%/$(hostname -f)}"
	hipchat_message "$MSG"
}

function remove_config {
	checkconfig_fail
	rm "$CONFIG"
	true
}

function write_initial_config {
	declare -A HOOK_NOTIFICATIONS
	populate_default_HOOK_NOTIFICATIONS
	write_config
	true
}

function hipchat_info {
	checkconfig_fail
	while read LINE; do
	  dokku_log_info2 "$LINE"
	done < "$CONFIG"
	true
}

function populate_default_HOOK_NOTIFICATIONS {
	HOOK_NOTIFICATIONS['pre-deploy']='Starting deployment for %APP%'
	HOOK_NOTIFICATIONS['post-deploy']='Deployment complete for %APP%'
	HOOK_NOTIFICATIONS['pre-build']='Beginning build for %APP%'
	HOOK_NOTIFICATIONS['post-build']='Build Complete for %APP%'
}